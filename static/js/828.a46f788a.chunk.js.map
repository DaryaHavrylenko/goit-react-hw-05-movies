{"version":3,"file":"static/js/828.a46f788a.chunk.js","mappings":"4OAOMA,EAAmBC,EAAAA,GAAAA,IAAH,8GAMhBC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,oGAMJG,EAAcH,EAAAA,GAAAA,GAAH,kDAGXI,EAAaJ,EAAAA,GAAAA,GAAH,6EAKVK,EAAeL,EAAAA,GAAAA,OAAH,mWAgFlB,UA3DsB,WACpB,OAA2BM,EAAAA,EAAAA,UAAS,MAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaP,GAASQ,KAAKX,EAC5B,GAAE,CAACG,KAEJM,EAAAA,EAAAA,YAAU,YACRG,EAAAA,EAAAA,IAAUT,GAASQ,KAAKT,EACzB,GAAE,CAACC,IAKJ,GAAKJ,GAGAE,EAIL,OACE,UAACV,EAAD,YACE,SAACM,EAAD,CAAcgB,KAAK,SAASC,QAbX,WACnBP,EAASF,EAASU,MAAMC,KACzB,EAWG,UACE,SAAC,MAAD,CAAoBC,KAAK,YAG3B,wBAAKlB,EAAMmB,SACX,gBACEC,IAAG,UAnCK,kCAmCUpB,EAAMqB,eACxBC,IAAKtB,EAAMmB,MACXI,MAAO,IACPC,OAAQ,OAEV,wCAAgBxB,EAAMyB,WAAWC,QAAQ,OACzC,yCAAiB1B,EAAM2B,aAAaD,QAAQ,OAC5C,UAAC7B,EAAD,qBAEGK,EAAO0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,SAAClC,EAAD,UAAuBkC,GAALD,EADR,QAId,sCAAc7B,EAAM+B,aAEpB,mDACA,SAACrC,EAAD,CAAMsC,GAAG,OAAOhB,MAAOV,EAASU,MAAhC,mBAGA,SAACtB,EAAD,CAAMsC,GAAG,UAAUhB,MAAOV,EAASU,MAAnC,sBAGA,SAAC,KAAD,MAGL,C,sNCzGKiB,EAAU,mCAEhBC,EAAAA,GAAAA,SAAAA,QAAuB,+BAGhB,IAAMC,EAAgB,mCAAG,sGACOD,EAAAA,GAAAA,IAAA,sCAAyCD,IADhD,uBACZG,EADY,EACpBC,KAAQD,QADY,kBAGrBA,GAHqB,2CAAH,qDAMhBzB,EAAY,mCAAG,WAAOkB,GAAP,yFACDK,EAAAA,GAAAA,IAAA,iBAAoBL,EAApB,oBAAkCI,EAAlC,oBADC,uBAChBI,EADgB,EAChBA,KADgB,kBAGjBA,GAHiB,2CAAH,sDAMZC,EAAe,mCAAG,WAAMC,GAAN,yFACOL,EAAAA,GAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDM,EAApD,+CADP,uBACZH,EADY,EACnBC,KAAOD,QADY,kBAEpBA,GAFoB,2CAAH,sDAKfI,EAAO,mCAAG,WAAMpC,GAAN,yFACS8B,EAAAA,GAAAA,IAAA,iBAAoB9B,EAApB,4BAA+C6B,EAA/C,oBADT,uBACNQ,EADM,EACZJ,KAAMI,KADM,kBAGZA,GAHY,2CAAH,sDAMPC,EAAU,mCAAG,WAAMtC,GAAN,yFACD8B,EAAAA,GAAAA,IAAA,iBAAoB9B,EAApB,4BAA+C6B,EAA/C,2BADC,uBACfI,EADe,EACfA,KADe,kBAGfA,EAAKD,SAHU,2CAAH,sDAMVvB,EAAS,mCAAE,WAAOT,GAAP,yFACU8B,EAAAA,GAAAA,IAAA,iBAAoB9B,EAApB,oBAAuC6B,IADjD,uBACP/B,EADO,EACbmC,KAAMnC,OADO,kBAGbA,GAHa,2CAAF,qD","sources":["pages/MoviesDetails.jsx","servises/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { getFilmsById, getGenres } from '../servises/api';\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate, NavLink } from 'react-router-dom';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport styled from 'styled-components';\nconst DetailsContainer = styled.div`\n  width: 1280px;\n  padding: 22px 24px;\n  margin-left: auto;\n  margin-right: auto;\n`;\nconst Link = styled(NavLink)`\n  text-decoration: none;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\nconst ItemsGenres = styled.li`\n  list-style-type: none;\n`;\nconst GenresList = styled.ul`\n  /* display: flex; */\n  padding: 0;\n  margin: 0;\n`;\nconst ButtonGoBack = styled.button`\n  display: flex;\n  justify-content: center;\n  width: 50px;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 10px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  font: inherit;\n  font-size: inherit;\n  background-color: #dcf2b0;\n  &:hover {\n    color: white;\n    background-color: orangered;\n  }\n`;\n\nconst baseUrl = 'https://image.tmdb.org/t/p/w500';\n\nconst MoviesDetails = () => {\n  const [movie, setMovies] = useState(null);\n  const [genres, setGenres] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    getFilmsById(movieId).then(setMovies);\n  }, [movieId]);\n\n  useEffect(() => {\n    getGenres(movieId).then(setGenres);\n  }, [movieId]);\n  const handleGoBack = () => {\n    navigate(location.state.from);\n  };\n\n  if (!movie) {\n    return;\n  }\n  if (!genres) {\n    return;\n  }\n\n  return (\n    <DetailsContainer>\n      <ButtonGoBack type=\"button\" onClick={handleGoBack}>\n        <AiOutlineArrowLeft size=\"1rem\" />\n      </ButtonGoBack>\n\n      <h1>{movie.title}</h1>\n      <img\n        src={`${baseUrl + movie.backdrop_path}`}\n        alt={movie.title}\n        width={500}\n        height={300}\n      />\n      <p>Popularity: {movie.popularity.toFixed(0)}</p>\n      <p>Vote Average:{movie.vote_average.toFixed(1)}</p>\n      <GenresList>\n        Genres:\n        {genres.map(({ id, name }) => (\n          <ItemsGenres key={id}>{name}</ItemsGenres>\n        ))}\n      </GenresList>\n      <p>Overview: {movie.overview}</p>\n\n      <p>Additional information</p>\n      <Link to=\"cast\" state={location.state}>\n        Cast\n      </Link>\n      <Link to=\"reviews\" state={location.state}>\n        Reviews\n      </Link>\n      <Outlet />\n    </DetailsContainer>\n  );\n};\nexport default MoviesDetails;\n","import axios from 'axios';\nconst KEY_API = '301d018a3b09052968e9ce18b1793bab'\n\naxios.defaults.baseURL='https://api.themoviedb.org/3'\n\n\nexport const getTrendingFilms = async () => {\n    const { data: { results} } = await axios.get(`/trending/movie/day?api_key=${KEY_API}`);\n    \n    return results;\n}\n\nexport const getFilmsById = async (id) => {\n    const { data } = await axios.get(`/movie/${id}?api_key=${KEY_API}&language=en-US`);\n    // console.log(data)\n    return data;\n}\n\nexport const getFilmsByQuery = async query => {\n    const { data: {results} } = await axios.get(`/search/movie?api_key=${KEY_API}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return results\n}\n\nexport const getCast = async movieId => {\n    const {data:{cast}} = await axios.get(`/movie/${movieId}/credits?api_key=${KEY_API}&language=en-US`);\n   \n    return cast;\n}\n\nexport const getReviews = async movieId => {\n    const {data} = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY_API}&language=en-US&page=1`);\n\n    return data.results;\n}\n\nexport const getGenres= async (movieId) => {\n    const {data:{genres}} = await axios.get(`/movie/${movieId}?api_key=${KEY_API}`);\n    // console.log(res.data.genres)\n    return genres;\n}\n\n\n"],"names":["DetailsContainer","styled","Link","NavLink","ItemsGenres","GenresList","ButtonGoBack","useState","movie","setMovies","genres","setGenres","movieId","useParams","location","useLocation","navigate","useNavigate","useEffect","getFilmsById","then","getGenres","type","onClick","state","from","size","title","src","backdrop_path","alt","width","height","popularity","toFixed","vote_average","map","id","name","overview","to","KEY_API","axios","getTrendingFilms","results","data","getFilmsByQuery","query","getCast","cast","getReviews"],"sourceRoot":""}